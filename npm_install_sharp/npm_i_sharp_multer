const multer = require('multer');
npm i sharp 
const sharp = require('sharp');




const multerStorage = multer.memoryStorage();

//create multer filter
const multerFilter = (req, file, cb) => {
  // the goal of this function is to check the uploaded file whether it is an image or not
  if (file.mimetype.startsWith('image')) {
    cb(null, true);
  } else {
    cb(new AppError('Not an image! Please upload only images.', 400), false);
  }
};

const upload = multer({
  storage: multerStorage,
  fileFilter: multerFilter,
});

// create multer middleware
exports.uploadUserPhoto = upload.single('photo');

// photo resizer
exports.resizeUserPhoto = (req, res, next) => {
  if (!req.file) return next();

  req.file.filename = `user-${req.user.id}-${Date.now()}.jpeg`;

  sharp(req.file.buffer)
    .resize(500, 500)
    .toFormat('jpeg')
    .jpeg({ quality: 90 })
    .toFile(`public/img/users/${req.file.filename}`);

  next();
};


// user updating 
exports.updateMe = catchAsync(async (req, res, next) => {
  console.log(req.file);
  console.log(req.body);
  // 1. Create error if user posts password data
  if (req.body.password || req.body.passwordConfirm) {
    return next(
      new AppError(
        'This route is not for password update, please use /updateMyPassword.',
        400
      )
    );
  }
  // 2. filtered unwanted field names which are not allowed to be updated
  const filteredBody = filterObj(req.body, 'name', 'email');
  // adding photo property to filteredBody req.file.filename is photo property
  if (req.file) filteredBody.photo = req.file.filename;
  // 3. Update user document
  const updateUser = await User.findByIdAndUpdate(req.user.id, filteredBody, {
    new: true,
    runValidators: true,
  });

  res.status(200).json({
    status: 'success',
    data: {
      user: updateUser,
    },
  });
});
